// webppl rsa.wppl --require .

var meaning = function(utterance, world, params) {
    var parses = parseAsDistribution(utterance, params, "$S");
    // Don't do enumerate
    return Enumerate(function() { sample(parses).semantics(world); });
};

var utteranceProbability = function(utterance, world, params, startSymbol) {
    var chart = parser.call(utterance, params);
    var rootCellDerivations = semppl.getRootCellDerivations(chart, startSymbol);

    // Gather the two relevant probabilities
    var derivationProbabilities = map(function(d) { return d.getScore(scoreFn, featureFn); }, rootCellDerivations);
    var truthProbabilities = map(denotationProbability(world), rootCellDerivations);
    
    // We now have probabilities that the sentences are true given derivations P(t | d)
    // Also probabilities that derivations are correct P(d)

    // Marginalize out derivation by summing over derivations, multiply the two probabilities
    return sum(map2(function(derivation, truth) {
        return derivation * truth;
    }, derivationProbabilities, truthProbabilities));
};

var denotationProbability = function(world) {
    return function(derivation) {
        return derivation.semantics(world);
    };
};

var grammar = semppl.grammar;
var featureFn = function() {};
var scoreFn = function() { return 1; };
var parser = { call: semppl.createParser(grammar, featureFn, scoreFn) };

meaning("John jumped", {
    domain: ["john"],
    model: { jumped: ["john"] }
}, {});