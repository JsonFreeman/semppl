// webppl rsa.wppl --require .

var utteranceProbability = function(utterance, world, params, startSymbol) {
    var chart = parser.call(utterance, params);
    var rootCellDerivations = semppl.getRootCellDerivations(chart, startSymbol);

    // Gather the two relevant probabilities
    var derivationProbabilities = map(function(d) {
        return scoreFn(featureFn(d), params);
    }, rootCellDerivations);

    // World dependent part starts here.
    var truthProbabilities = map(denotationProbability(world), rootCellDerivations);
    
    // We now have probabilities that the sentences are true given derivations P(t | d)
    // Also probabilities that derivations are correct P(d)

    // Marginalize out derivation by summing over derivations, multiply the two probabilities
    return sum(map2(function(derivation, truth) {
        return derivation * truth;
    }, derivationProbabilities, truthProbabilities));
};

var denotationProbability = function(world) {
    return function(derivation) {
        return derivation.semantics(world);
    };
};

var grammar = semppl.grammar;
var parser = { call: semppl.createParser(grammar) };
var featureFn = function() { return {}; };
var scoreFn = function(features, params) {
    return sum(_.mapObject(features, function(v, k) {
        return _.has(params, k) ? v * params[k] : 0;
    }));
};

utteranceProbability;