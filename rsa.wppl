// webppl rsa.wppl --require .
var nnparam = function(a, b) {
  return tensorParam([a, b], 0, 0.1);
};

var featureFn = function(d) { return semppl.ruleFeatureFn(d); };
var scoreFn = function(features, params) {
    return sum(_.values(mapObject(function(k, v) {
        return _.has(params, k) ? v * params[k] : 0;
    }, features)));
};

var normalize = function(array) {
    var s = sum(array);
    return map(function(x) {
        return x / s;
    }, array);
};

var denotationProbability = function(world) {
    return function(derivation) {
        return derivation.semantics(world);
    };
};

var parse = function(parser, params, utterance, theta, startSymbol) {
    // Need to use .call to call parser as a js function
    var chart = parser.call(null, utterance, theta);
    var rootCellDerivations = semppl.getRootCellDerivations(chart, startSymbol);

    // Gather the two relevant probabilities
    var derivationProbabilities = normalize(map(function(d) {
        return Math.exp(scoreFn(featureFn(d), params.parserWeights));
    }, rootCellDerivations));

    return function(world) {
        // World dependent part starts here.
        var truthProbabilities = map(denotationProbability(world), rootCellDerivations);
        
        // We now have probabilities that the sentences are true given derivations P(t | d)
        // Also probabilities that derivations are correct P(d)

        // Marginalize out derivation by summing over derivations, multiply the two probabilities
        return sum(map2(function(derivation, truth) {
            return derivation * truth;
        }, derivationProbabilities, truthProbabilities));
    };
};

var sampleMatrixGaussian = function(dims,mean,variance,guide_mean){
  var length = dims[0]*dims[1]
  var g = sample(DiagCovGaussian({ mu: Vector(repeat(length, constF(mean))), sigma: Vector(repeat(length, constF(variance)))}),
    {guide: DiagCovGaussian({ mu: T.reshape(guide_mean,[length,1]), sigma: Vector(repeat(length, constF(0.001)))})})
  return T.reshape(g,dims)
}

var sampleScalarGaussian = function(mean, variance) {
    return sample(Gaussian({ mu: mean, sigma: variance }),
        { guide: Gaussian({ mu: scalarParam(mean), sigma: 0.001 }) });
}

var factorConjunction = function(dist, support) {
    var probabilityOfConjunction = sum(map(function(e) {
        return dist.score(e);
    }, support));
    factor(probabilityOfConjunction);
}

var createParserWeights = function(grammar) {
    var arrow = ' -> ';
    return _.object(map(function(entry) {
        return [
            entry.LHS + arrow + entry.RHS, // key
            sampleScalarGaussian(0, 1) // value
        ];
    }, grammar));
};

var sampleUniformPrior = function(support) {
    return support[randomInteger(support.length)];
};

var literalListenerFn = function(parser, params) {
    return cache(function(utterance, theta, worlds) {
        Infer({method: 'enumerate'}, function() {
            var truthFn = parse(parser, params, utterance, theta, "$S");
            var world = sampleUniformPrior(worlds);
            factor(Math.log(truthFn(world)));
            return world;
        })
    })
}

var speakerFn = function(parser, params) {
    var literalListener = literalListenerFn(parser, params);
    return cache(function(world, theta, worlds, utterances) {
        Infer({method: 'enumerate'}, function() {
            var utterance = sampleUniformPrior(utterances);
            var L = literalListener(utterance, theta, worlds);
            factor(L.score(world));
            return utterance;
        })
    })
}

var listenerFn = function(parser, params) {
    var speaker = speakerFn(parser, params);
    return cache(function(utterance, thetaCandidates, worlds, utterances) {
        Infer({method: 'enumerate'}, function() {
            var theta = sampleUniformPrior(thetaCandidates);
            var world = sampleUniformPrior(worlds);
            var S = speaker(world, theta, worlds, utterances);
            factor(S.score(utterance));
            return world;
        })
    })
}

var createNetworkParams = function(hiddenSize, inputSize) {
    var W0_var = nnparam(hiddenSize,inputSize)
    var W1_var = nnparam(1,hiddenSize)
    var b0_var = nnparam(hiddenSize,1)
    var b1_var = nnparam(1,1)

    var W0 = sampleMatrixGaussian([hiddenSize,inputSize],0,10,W0_var)
    var W1 = sampleMatrixGaussian([1,hiddenSize],0,10,W1_var)
    var b0 = sampleMatrixGaussian([hiddenSize,1],0,10,b0_var)
    var b1 = sampleMatrixGaussian([1,1],0,10,b1_var)

    return { W: [W0, W1], b: [b0, b1] };
}

var model = function() {
    var worldsFromHeightsFn = function(h) {
        return {
            facts: { height: { john: h } },
            domain: ["john"]
        };
    };
    var peopleWorlds = map(worldsFromHeightsFn, [8, 6, 4]);
    var buildingsWorlds = map(worldsFromHeightsFn, [80, 60, 40]);

    var utterances = ["John is tall", "null"];

    var scalarAdjectives = ['tall', 'heavy', 'big'];

    var params = { 
        parserWeights: createParserWeights(semppl.grammarIsTall),
        networkParams: _.object(scalarAdjectives, repeat(scalarAdjectives.length, function() {
            createNetworkParams(10, 3)
        }))
    };

    var thetaCandidates = map(function(theta) {
        return {
            tall: theta
        };
    }, [8, 6, 4, 80, 60, 40]);

    //display(params.parserWeights);
    // Measure network output for John
    // Try out with several dimensions in each world. 
    var parser = semppl.createParser(semppl.grammarIsTall, params, semppl.ruleFeatureFn)
    var listener = listenerFn(parser, params);
    var distOnPeopleWorlds = listener("John is tall", thetaCandidates, peopleWorlds, utterances);
    factor(distOnPeopleWorlds.score(peopleWorlds[0]));

    var distOnBuildingsWorlds = listener("John is tall", thetaCandidates, buildingsWorlds, utterances);
    factor(distOnBuildingsWorlds.score(buildingsWorlds[0]));

    return {
        people: distOnPeopleWorlds,
        buildings: distOnBuildingsWorlds
    };
};
var runTest = function(opts) {
    display(sample(OptimizeThenSample(model, {steps: 2000, estimator: {ELBO: {samples: 1}}, verbose: opts.verbose})));
}

runTest({ verbose: true });

/**
 * mapData
 * cache issue - close over params
 * Tall versus heavy (or even big)
 * Try to do some compositional learning
 * Sample the class explicitly
 * "is a tall man" + "is a tall building"
 * 
 * Tasks: 
 *  - Generate data using ground truth
 *  +!- Try to do caching refactor
 *  !- Introduce tall, heavy, big with a neural net for each
 *  - Refactor features and weights to add distinguisher
 *  - Implement intersective adjectives
 *  - Compositional learning:
 *    - Intersecting predicates: (multiply, first, second)
 *    - Different ways of applying predicate to entity: (apply to input, ignore input)
 *    - Introduce "John is not a tall man" - not(tall * man), not(tall) * man, not(man) * tall, not(man)
 *    - Try ambiguities with conjunction + disjunction
 */