// webppl --require webppl-json --require webppl-fs --require webppl-csv --require webppl-timeit --require . <this-file> (<runId> | new)
/**
 * This simply tests polar questions
 */
var experimentInfo = getExperimentNameAndRunId();
var experimentName = experimentInfo.name;
var runId = experimentInfo.runId;

var answers = Enumerate(function() {
    var subject = uniformDraw(["John is", "Mary is", "John and Mary are", "John or Mary is"]);
    var neg = uniformDraw([" ", " not "]);
    var predicate = subject.length === "John and Mary are".length ? 
        uniformDraw(["doctors", "teachers", "doctors and teachers", "doctors or teachers"]) :
        uniformDraw(["a doctor", "a teacher", "a doctor and a teacher", "a doctor or a teacher"]);

    return subject + neg + predicate;
}).support();
assert.equal(answers.length, 32);

var worldsDist = Enumerate(function() {
    return {
        domain: ["john", "mary"],
        facts: {
            doctor: flip() ? flip() ? ["john", "mary"] : ["john"] : flip() ? ["mary"] : [],
            teacher: flip() ? flip() ? ["john", "mary"] : ["john"] : flip() ? ["mary"] : [],
        }
    }
})
assert.equal(worldsDist.support().length, 16);

var questions = Enumerate(function() {
    if (flip()) {
        // Who
        var cop = uniformDraw([" is ", " isn't "]);
        var predicate = uniformDraw(["a doctor", "a teacher", "a doctor and a teacher", "a doctor or a teacher"]);
        return "Who" + cop + predicate;
    }
    else {
        // What
        var neg = uniformDraw([" ", "n't "]);
        var inverted = uniformDraw([['is', 'John'], ['is', 'Mary'], ['are', 'John and Mary'], ['is', 'John or Mary']]);
        return "What " + inverted.join(neg);
    }
}).support();

var costFn = function(u) { .1 * wordCount(u) };
var generateDataModel = createModel(questions, answers, costFn, worldsDist, 
                                    null, 1, 3, createParser(semppl.fixedGrammar, {}))

var domain = ["john", "mary"];
var john = ["john"]
var mary = ["mary"]
computeAndWriteResults(experimentName, runId, generateDataModel, generateDataModel, [
    { agent: "A1", query: ["Is John a doctor", { domain, facts: { doctor: john, teacher: john } }] },
    { agent: "A1", query: ["Is John a doctor or a teacher", { domain, facts: { doctor: john, teacher: john } }] },
    { agent: "A1", query: ["Is John a doctor and a teacher", { domain, facts: { doctor: john, teacher: john } }] },
    { agent: "A1", query: ["Is John or Mary a doctor", { domain, facts: { doctor: john, teacher: john } }] },
    { agent: "A1", query: ["Are John and Mary doctors", { domain, facts: { doctor: john, teacher: john } }] },
    { agent: "A1", query: ["Is John a doctor", { domain, facts: { doctor: [], teacher: john } }] },
    { agent: "A1", query: ["Is John a doctor or a teacher", { domain, facts: { doctor: [], teacher: john } }] },
    { agent: "A1", query: ["Is John a doctor and a teacher", { domain, facts: { doctor: [], teacher: john } }] },
    { agent: "A1", query: ["Is John or Mary a doctor", { domain, facts: { doctor: [], teacher: john } }] },
    { agent: "A1", query: ["Are John and Mary doctors", { domain, facts: { doctor: [], teacher: john } }] },
])