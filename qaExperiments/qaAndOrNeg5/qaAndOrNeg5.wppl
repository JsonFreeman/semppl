// webppl --require webppl-json --require webppl-fs --require webppl-csv --require webppl-timeit --require . <this-file> (<runId> | new)
/**
 * This test Q2 of the QA model with questions and answers that contain conjunction, disjunction and negation. There are 
 * two entities (John and Mary) and two predicates (doctor and teacher). The QUDs correspond to John, Mary, doctor and 
 * teacher respectively. Predicate semantics are fixed. Semantics of conjunction, disjunction and negation are learned. 
 * This is the first QA experiment.
 */
var experimentInfo = getExperimentNameAndRunId();
var experimentName = experimentInfo.name;
var runId = experimentInfo.runId;

var answers = Enumerate(function() {
    var subject = uniformDraw(["John is", "Mary is"]);
    var neg = uniformDraw([" ", " not "]);
    var predicate = subject.length === "John and Mary are".length ? 
        uniformDraw(["doctors", "teachers", "doctors and teachers", "doctors or teachers"]) :
        uniformDraw(["a doctor", "a teacher", "a doctor and a teacher", "a doctor or a teacher"]);

    return subject + neg + predicate;
}).support();
// assert.equal(answers.length, 32);

var worldsDist = Enumerate(function() {
    var domain = ["john", "mary"];
    return {
        domain,
        facts: {
            doctor: filter(function(x) { flip() }, domain),
            teacher: filter(function(x) { flip() }, domain)
        }
    }
})
// assert.equal(worldsDist.support().length, 16);

var questions = Enumerate(function() {
    var neg = uniformDraw([" "]);
    var predicate = uniformDraw(["a doctor", "a teacher"]);
    return "Who is" + neg + predicate;
}).support();

var quds = {
    doctor(w) { w.facts.doctor },
    teacher(w) { w.facts.teacher },
    john(w) { _.keys(_.pickBy(w.facts, _.partial(_.includes, _, "john")))},
    mary(w) { _.keys(_.pickBy(w.facts, _.partial(_.includes, _, "mary")))},
};
var qudNames = _.keys(quds);

var costFn = function(u) { .1 * wordCount(u) };
var generateDataModel = createModel(questions, answers, costFn, worldsDist, 
                                    quds, 1, 1, createParser(semppl.fixedGrammar, {}))

computeAndWriteResults(experimentName, runId, generateDataModel, generateDataModel, [
// { agent: 'A1', query: ["Who is a doctor", { domain: ["john", "mary"], facts: { doctor: ["john", "mary"], teacher: []}}]},
{ agent: 'Q1', query: ['doctor'] }
])
