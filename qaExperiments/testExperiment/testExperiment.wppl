// webppl --require webppl-json --require webppl-fs --require webppl-csv --require . <this-file> (<runId> | new)
var experimentInfo = getExperimentNameAndRunId();
var experimentName = experimentInfo.name;
var runId = experimentInfo.runId;

var questions = ["Who is a doctor", "Who is a teacher", "Who is a fisherman"]
var answers = ["John is a doctor", "John is a teacher", "John is a fisherman",
                    "John and Mary is a doctor", "John and Mary is a teacher", "John and Mary is a fisherman"]
var worlds = [  { domain: ["john", "mary"], facts: { doctor: ["john"], teacher: [], fisherman: []}},
                { domain: ["john", "mary"], facts: { doctor: [], teacher: ["john"], fisherman: []}},
                { domain: ["john", "mary"], facts: { doctor: [], teacher: [], fisherman: ["john"]}},
                { domain: ["john", "mary"], facts: { doctor: ["john", "mary"], teacher: [], fisherman: []}},
                { domain: ["john", "mary"], facts: { doctor: [], teacher: ["john", "mary"], fisherman: []}},
                { domain: ["john", "mary"], facts: { doctor: [], teacher: [], fisherman: ["john", "mary"]}},]
var qudCandidates = [function(w) { w.facts.teacher }];
var qudCandidatesRange = _.range(qudCandidates.length);

var generateDataModel = createModel(questions, answers, constF(1),
                                    Categorical({ vs: worlds, ps: ones([worlds.length]).toFlatArray() }),
                                    qudCandidates, 1, createParser(semppl.fixedGrammar, {}))

var data = readOrGenerateTrainingData(experimentName, runId, [questions, answers, worlds, qudCandidatesRange], 
    function(q, a, w, qudIndex) {
        return apply(generateDataModel.A1, [q, w]);
    }, 5);

var predicates = ['doctor', 'teacher', 'fisherman'];
var predicateNetworkSpec = networkSpecs.twoLayerFFNetWithSigmoid;
var logicalConnectiveNetworkSpec = networkSpecs.twoLayerFFNetWithSigmoid;
var networks = {
    doctor: predicateNetworkSpec(/*hiddenSize*/ 10, predicates.length),
    teacher: predicateNetworkSpec(/*hiddenSize*/ 10, predicates.length),
    fisherman: predicateNetworkSpec(/*hiddenSize*/ 10, predicates.length),
    and: logicalConnectiveNetworkSpec(3, 2),
    or: logicalConnectiveNetworkSpec(3, 2),
    not: logicalConnectiveNetworkSpec(3, 1)
}
var grammarFn = semppl.makeNeuralPredicateGrammar;
var model = createVariationalModel(questions, answers, constF(1),
    Categorical({ vs: worlds, ps: ones([worlds.length]).toFlatArray() }),
    qudCandidates, 1, grammarFn, networks, function(model) {
        mapData({ data: data, batchSize: 10 }, function(d) {
            observe(apply(model.A1, [d[0], d[2]]), d[1]);
        })
    }, 
    { optimizer: 'adam', 
      steps: 20, 
      estimator: 'ELBO', 
      checkGradients: false, 
      checkpointParams: true,
      logProgress: true
    }, experimentName, runId);

computeAndWriteResults(experimentName, runId, generateDataModel, model, [
    { agent: "A1", query: [questions[0], worlds[0], /*qudIndex*/ 0] },
    { agent: "Q1", query: [/*qudIndex*/ 0] }
]);

testNetworks(experimentName, runId, model.networks, {
    not: { range: [0, 1, 0.2], arity: 1 },
});