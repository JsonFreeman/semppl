// webppl --require webppl-json --require webppl-fs --require webppl-csv --require . <this-file> (<runId> | new)
/**
 * This test exercises standard RSA (specifically L1) with utterances that contain conjunction and negation (no 
 * disjunction). There are two entities (John and Mary) and two predicates (doctor and teacher). Predicate semantics 
 * are fixed. Semantics of conjunction and negation are learned.
 */
var experimentInfo = getExperimentNameAndRunId();
var experimentName = experimentInfo.name;
var runId = experimentInfo.runId;

var utterances = Enumerate(function() {
    var subject = uniformDraw(["John is", "Mary is", "John and Mary are"]);
    var neg = uniformDraw([" ", " not "]);
    var predicate = subject.length === "John and Mary are".length ? 
        uniformDraw(["doctors", "teachers", "doctors and teachers"]) :
        uniformDraw(["a doctor", "a teacher", "a doctor and a teacher"]);

    return subject + neg + predicate;
}).support();
assert.equal(utterances.length, 18);

var worldsDist = Enumerate(function() {
    return {
        domain: ["john", "mary"],
        facts: {
            doctor: flip() ? flip() ? ["john", "mary"] : ["john"] : flip() ? ["mary"] : [],
            teacher: flip() ? flip() ? ["john", "mary"] : ["john"] : flip() ? ["mary"] : [],
        }
    }
})
assert.equal(worldsDist.support().length, 16);

var costFn = function(u) { .1 * wordCount(u) };
var generateDataModel = createModel(undefined, utterances, costFn, worldsDist, 
                                    undefined, 1, createParser(semppl.fixedGrammar, {}))

var data = readOrGenerateTrainingData(experimentName, runId, [utterances], 
    function(u) {
        return apply(generateDataModel.L1, [u]);
    }, 10);

var logicalConnectiveNetworkSpec = networkSpecs.twoLayerFFNetWithSigmoid;
var networks = {
    and: logicalConnectiveNetworkSpec(3, 2),
    or: logicalConnectiveNetworkSpec(3, 2),
    not: logicalConnectiveNetworkSpec(3, 1)
}

var grammarFn = semppl.makeNeuralConnectiveGrammar;
var model = createVariationalModel(undefined, utterances, costFn, worldsDist, undefined, 1, grammarFn, networks, 
    function(model) {
        mapData({ data: data, batchSize: 8 }, function(d) {
            observe(apply(model.L1, [d[0]]), d[1]);
        })
    }, 
    { optimizer: 'adam', 
      steps: 1000, 
      estimator: 'ELBO', 
      checkGradients: false, 
      checkpointParams: true,
      logProgress: true,
      showGradNorm: true, 
    }, experimentName, runId);

testNetworks(experimentName, runId, model.networks, {
    not: { range: [0, 1.01, 0.01], arity: 1 },
    and: { range: [0, 1.01, 0.01], arity: 2 }
});