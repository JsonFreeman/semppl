// Paths
var fs = webpplFs.node;

var makeRunDir = function(experimentName, runId) {
    return "qaExperiments/" + experimentName + "/run" + runId;
}

var makeRunPath = function(experimentName, runId) {
    var dir = makeRunDir(experimentName, runId);
    var basePath = dir + "/" + experimentName + "-" + runId;
    return { 
        dir: dir,
        dataPath: basePath + "-data.json",
        paramsPath: basePath + "-params.json",
        logPath: basePath + "-log.csv"
    };
}

var makeQueryPath = function(experimentName, runId, queryId) {
    var runDir = makeRunDir(experimentName, runId);
    var queryDir = runDir + "/query" + queryId;
    var basePath = queryDir + "/" + experimentName + "-" + runId + "-" + queryId;
    return {
        dir: queryDir,
        queryPath: basePath + "-query.json",
        resultPath: basePath + "-results.json"
    };
}

var makeNetworkTestPath = function(experimentName, runId, networkName) {
    var runDir = makeRunDir(experimentName, runId);
    return runDir + "/nn-" + networkName + ".csv";
}

var getExperimentNameAndRunId = function() {
    var experimentPath = _.nth(process.argv, -2);
    var experimentName = experimentPath.substring(experimentPath.lastIndexOf('/') + 1, experimentPath.lastIndexOf('.'));
    var runId = _.parseInt(_.nth(process.argv, -1));

    return {
        name: experimentName,
        runId: runId
    }
}

var wordCount = function(utterance) {
    return _.words(utterance).length;
}

// Generating data and results
var generateTrainingData = function(listOfLists, fn, numSamples) {
    var recursiveMap = function(listOfLists, fn, numSamples, args /* internal*/) {
        if (listOfLists.length === 0) {
            var resultDist = apply(fn, args);
            return repeat(numSamples, function() {
                return snoc(args, sample(resultDist));
            })
        }

        var restEntries = rest(listOfLists);
        return _.flatten(map(function(e) { 
            recursiveMap(restEntries, fn, numSamples, snoc(args, e))
        }, first(listOfLists)), /*shallow*/ true)
    };
    
    return recursiveMap(listOfLists, fn, numSamples, []);
}

var readOrGenerateTrainingData = function(experimentName, runId, listOfLists, fn, numSamples) {
    var runPath = makeRunPath(experimentName, runId);
    if (fs.existsSync(runPath.dataPath)) {
        return json.read(runPath.dataPath).data;
    }

    if (!fs.existsSync(runPath.dir)) {
        webpplFs.mkdirp(runPath.dir);
    }

    var data = { samples: numSamples, data: generateTrainingData(listOfLists, fn, numSamples) };
    json.write(runPath.dataPath, data);
    return data.data;
}

var computeAndWriteResults = function(experimentName, runId, groundTruthModel, learnedModel, queryAndAgentPairs) {
    var queriesAndResults = mapIndexed(function(queryId, queryAndAgent) {
        var queryPath = makeQueryPath(experimentName, runId, queryId);
        // Hack to extract the facts from each world (since the domain is the same)
        var query = map(function(q) { q.facts || q }, queryAndAgent.query);
        var trueResult = apply(groundTruthModel[queryAndAgent.agent], queryAndAgent.query);
        var learnedResult = apply(learnedModel[queryAndAgent.agent], queryAndAgent.query);
        var KLDivergence = KL(trueResult, learnedResult);

        // Write query and result before returning them
        if (!fs.existsSync(queryPath.dir)) {
            webpplFs.mkdirp(queryPath.dir);
        }
        json.write(queryPath.queryPath, query);
        json.write(queryPath.resultPath, { trueResult, learnedResult, KLDivergence });

        
        return {
            query,
            trueResult,
            learnedResult,
            KLDivergence
        }
    }, queryAndAgentPairs);

    return queriesAndResults;
}

var testNetworks = function(experimentName, runId, networks, tests) {
    mapObject(function(networkName, test) {
        var networkTestPath = makeNetworkTestPath(experimentName, runId, networkName);
        var network = networks[networkName];
        var range = _.range.apply(_, test.range);
        var results = Enumerate(function() {
            var args = repeat(test.arity, function() { uniformDraw(range); });
            return snoc(args, network.call(null, Vector(args)));
        }).support();

        webpplCsv.writeCSV(results, networkTestPath);

    }, tests);
}