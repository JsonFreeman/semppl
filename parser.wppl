var featureFn = function (d) { return semppl.ruleFeatureFn(d); };
var scoreFn = function (features, params) {
    return sum(_.values(mapObject(function (k, v) {
        return _.has(params, k) ? v * params[k] : 0;
    }, features)));
};

var normalize = function (array) {
    var s = sum(array);
    return map(function (x) {
        return x / s;
    }, array);
};

var getSemantics = function (world) {
    return function (derivation) {
        return derivation.semantics(world);
    };
};

var marginalizeDerivationsForAssertion = function(derivationProbabilities, semantics) {
    return sum(map2(function (derivation, truth) {
        return derivation * truth;
    }, derivationProbabilities, semantics));
}

var marginalizeDerivationsForQuestion = function(derivationProbabilities, semantics) {
    return function(element) {
        return sum(map2(function (derivation, truthFn) {
            // truthFn was returned by the parser, so need to call it as a js function
            return derivation * truthFn.call(null, element);
        }, derivationProbabilities, semantics));
    }
}

var createParser = function (grammar, params) {
    var parser = semppl.createParser(grammar, params, semppl.ruleFeatureFn);
    return cache(function (utterance, theta, startSymbol) {
        // Need to use .call to call parser as a js function
        var chart = parser.call(null, utterance, theta);
        var rootCellDerivations = semppl.getRootCellDerivations(chart, startSymbol);

        assert.ok(chart && rootCellDerivations && rootCellDerivations.length > 0,
            "Cannot parse utterance '" + utterance + "' with startSymbol " + startSymbol)
        // Gather the two relevant probabilities
        var derivationProbabilities = normalize(map(function (d) {
            return Math.exp(scoreFn(featureFn(d), params.parserWeights));
        }, rootCellDerivations));

        var marginalizationFunction = startSymbol === "$S" ? marginalizeDerivationsForAssertion :
                                      startSymbol === "$WH" ? marginalizeDerivationsForQuestion :
                                      null;

        return cache(function (world) {
            // World dependent part starts here.
            var semantics = map(getSemantics(world), rootCellDerivations);

            // We now have probabilities that the sentences are true given derivations P(t | d)
            // Also probabilities that derivations are correct P(d)

            return marginalizationFunction(derivationProbabilities, semantics);
        });
    });
}

var createParserWeights = function (grammar) {
    return _.fromPairs(map(function (entry) {
        var name = semppl.makeRuleKey(entry);
        return [
            name, // key
            modelParam({ mu: 0, name: name }) // value
        ];
    }, grammar));
};

var makeModelParams = function(grammar, networks) {
    return {
        parserWeights: createParserWeights(grammar),
        networkParams: mapObject(function(k, v) {
            apply(v.spec.paramConstructor, v.constructionParameters)(k)
        }, networks)
    };
}