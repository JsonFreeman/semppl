var parse = function(utterance) {
    if (utterance === ">0")
        return function(w) { return w.x > 0 };
    if (utterance === "=0")
        return function(w) { return w.x === 0 };
    if (utterance === "=1")
        return function(w) { return w.x === 1 };
    if (utterance === ">0?")
        return function(w) { return w.x > 0 };
    if (utterance === "=1?")
        return function(w) { return w.x === 1 };
};

var KL = function(p, q){
    var values = p.support([]);
    return sum(map(
        function(value) {
            var scoreP = p.score(value);
            var scoreQ = q.score(value);
            var probP = Math.exp(scoreP);
            return probP === 0 ? 0 : probP * (scoreP - scoreQ);
        }, values));
};

var interpretAnswer = function(worldPrior, answer) {
    return Infer({method: 'enumerate'}, function() {
        var answerMeaning = parse(answer);
        var world = sample(worldPrior);
        condition(answerMeaning(world)); // Soften?
        return world;
    });
}

var qudPartition = function(worldDist, qudFn) {
    return Infer({method: 'enumerate'}, function() {
        var world = sample(worldDist);
        return qudFn(world);
    });
}

var trueWorldScore = function(worldPrior, answer, qud, trueWorld) {
    var consistentWorldQudValues = qudPartition(interpretAnswer(worldPrior, answer), qud);
    return consistentWorldQudValues.score(qud(trueWorld));
}

var informationGain = function(questionPrior, worldPrior, answerPrior, question,
                               qudPrior, qudFn, trueWorld, answerer, rationality) {
    var prior = qudPartition(worldPrior, qudFn);
    var posterior = Infer({method: 'enumerate'}, function() {
        // Add answerPrior as parameter
        var answer = sample(answerer(questionPrior, answerPrior, worldPrior, qudPrior, question, trueWorld, rationality));
        var world = sample(interpretAnswer(worldPrior, answer));
        return qudFn(world);
    });

    return KL(posterior, prior);
}

var explicitAnswerer = function(questionPrior, answerPrior, worldPrior, qudPrior, question, trueWorld, rationality) {
    return Infer({method: 'enumerate'}, function() {
        var qud = parse(question);
        var answer = sample(answerPrior);
        factor(trueWorldScore(worldPrior, answer, qud, trueWorld) * rationality);
        return answer;
    })
}

var questioner = function(answerer) {
    return function(questionPrior, answerPrior, worldPrior, qudFn, rationality) {
        return Infer({method: 'enumerate'}, function() {
            var question = sample(questionPrior);
            var expectedInformationGain = expectation(worldPrior, function(world) {
                return informationGain(questionPrior, worldPrior, answerPrior, question,
                    qudPrior, qudFn, world, answerer, rationality);
            });
            factor(expectedInformationGain * rationality);
            return question;
        });
    }
}

var pragmaticAnswerer = function(questionPrior, answerPrior, worldPrior, qudPrior, question, trueWorld, rationality) {
    return Infer({method: 'enumerate'}, function() {
        var answer = sample(answerPrior);
        var qud = sample(qudPrior);
        var explicitQuestioner = questioner(explicitAnswerer);
        var questionDist = explicitQuestioner(questionPrior, answerPrior, worldPrior, qud, rationality);
        factor(
            (questionDist.score(question) +
            trueWorldScore(worldPrior, answer, qud, trueWorld)) * rationality);
        return answer;
    });
}

var pragmaticQuestioner = questioner(pragmaticAnswerer);

// Testing

var testExplicitAnswerer = function() {
    var questions = [">0?", "=1?"];
    var answers = [">0", "=0", "=1"]
    var worlds = [{ x: 0 }, { x: 1 }, { x: 2 }];
    var trueWorld = worlds[2];
    var question = questions[0];
    display(explicitAnswerer(null, 
        Categorical({vs: answers, ps: repeat(answers.length, constF(1))}),
        Categorical({vs: worlds, ps: repeat(worlds.length, constF(1))}),
        null, question, trueWorld, 1))
}

testExplicitAnswerer();